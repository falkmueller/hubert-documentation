
<?php
$translate = array(
	"doc" => "Documentation",
	"slug" => "de",
	"wording" => "Deutsch",
	"imp" => "Imprint"
);
?>

<?php $this->layout('layout',['translate' => $translate]) ?>

<?php $this->start('head') ?>
    <link rel="canonical" href="<?php echo $this->url(["name" => "home_language", "params" => ["language" => "de"]]) ?>" />
<?php $this->stop() ?>

<header>
	<section>
                
		<h1>This is<br>Hubert</h1>
                
		<img class="hubert" src="<?php echo $this->baseUrl("/public/images/hubert.png") ?>" alt="Hubert"/>
                
		<h3>Fast, easy and extensible<br>PHP micro framework</h3>
                
		<div class="window">
			<div class="top">
				<div class="circle"></div>
				<div class="circle"></div>
				<div class="circle"></div>
			</div>
			<pre>

				<div class="line">&lt;?php</div>
				<div class="line"><span class="assign">require</span> <span class="string">'vendor/autoload.php'</span>;</div>
				<div class="line">$app <span class="assign">=</span> <span class="assign">new</span> <span class="method">hubert</span>\<span class="method">app</span>();</div>
				<div class="line">$config <span class="assign">=</span> <span class="method">array</span>(</div>
				<div class="line">    <span class="string">"routes"</span> <span class="assign">=></span> <span class="method">array</span>(</div>
				<div class="line">        <span class="string">"home"</span> <span class="assign">=></span> <span class="method">array</span>(</div>
				<div class="line">            <span class="string">"route"</span> <span class="assign">=></span> <span class="string">"/"</span>,</div>
				<div class="line">            <span class="string">"target"</span> <span class="assign">=></span> <span class="assign">function</span>($request, $response, $args){</div>
				<div class="line">                <span class="method">echo</span> <span class="string">"Hello World"</span>;</div>
				<div class="line">            }</div>
				<div class="line">        )</div>
				<div class="line">    )</div>
				<div class="line">);</div>
				<div class="line">hubert($config);</div>
				<div class="line">hubert()<span class="assign">-></span>core()<span class="assign">-></span>run();</div>
			</pre>
		</div>

	</section>
</header>

<main>
	<section>

		<h2>Features and Standard components</h2>
		<div class="panel">

			<div class="feature">
				<i class="fa fa-cogs"></i>
				<div>
					<h4>Configuration</h4>
					<p>Hubert is configured by a single array. Within this array you can configure system settings, routes and container factories.</p>
				</div>
			</div>

			<hr/>

			<div class="feature">
				<i class="fa fa-archive"></i>
				<div>
					<h4>Container</h4>
					<p>Hubert provides a DI container based on pimple. The containers configured in the settings are globally accessible and only initialised on their first use.</p>
				</div>
			</div>

			<hr/>

			<div class="feature">
				<i class="fa fa-map-signs"></i>
				<div>
					<h4>Router</h4>
					<p>Hubert uses Alto Router. The routes are defined in the configuration and can be functions or function references.</p>
				</div>
			</div>

			<hr>

			<div class="feature">
				<i class="fa fa-book"></i>
				<div>
					<h4>PSR-7 implementation</h4>
					<p>By the use of PSR-7 implementation the request is ready as a container and routes can make use of standard response objects.</p>
				</div>
			</div>

		</div>

		<h2><a href="https://github.com/falkmueller/hubert">Get it now on <i class="fa fa-github"></i></a></h2>

	</section>
</main>
